
gestire meglio gli errori
wrong_pwd_count
provare le migrations
read_counts
casesensitive router
gestire gli url come tipo url
wrappare i tipi in Elm e Haskell
altro: precommit check formatted, lint,  better crypto (usare funzioni crypto del browser, oppure creare della crypto corretta per costruzioni in agda, estrarre il programma haskell (o elm) e traspilarlo in Js o webasm)
https://protonmail.com/blog/protonmail-com-blog-password-vs-passphrase/ -> scegliamo password, è più adatta allo scopo (usa e getta) lasciamo la questione ad altir
aggiungere qualche test
url shortening
modalità offline: il segreto è autocontenuto nel query param, quindi non c'è limite di tempo
quando deploio non si invalida la cache
mettere google analytics
test performance con google report

Provare il template https://ihp.digitallyinduced.com/ShowPost?postId=af9d7040-ce08-4b32-b539-f6bc7e10926b

Modi: senza password, self-contained, self-destructing
.selfcontained. come faccio a genereare un link che non parla col server? accetto di parlare? apre un form e poi incollo a mano? riesco con un url javascript: ?

Nella pagina del link:
.Notify Me When The Note is Viewed
.pulsante inviare direttamente la mail (magari inviare email con sendgrid)
.get statistic and destruction link

privacy options:
.Passwords expire after a certain number of views (maybe infinite) and/or time has passed (maybe infinite). 
.url customizzabile
.nessuna password: il link permette di decifrare subito
.generate secure password -> vediamo cosa usa qui https://generatepasswords.org/

Doc:
.privacy policy
.documentare aPI


STATO
64
Performance
93
Accessibility
100
Best Practices
91
SEO

--------------------------------------------------------------------------------
possibilità di login. ho traccia dei links che ho creato. mi compila in automatico la mail di notifica
fare il seed con http://reversemicrowave.me/blog/2016/03/04/elm-secure-random/ invece che basato sul tempo
------------------------------------------------------------------------------------
prova che il deployato è il source code -> non è così importante, ispezionando la navigazione si può vedere che non inviamo mai segreti, inspectable online service
un pulsante nel sito che genera una PR con un numero arbitrario? ci vorrebbe una funzione apposita di github

poi usare chiavi gpg (nell'account) con tool offline di decrypt
li posta su una blockchain

github action deploy (magari che fa solo check lint/format)

logo più carino

fare la pace col CSS, estrarre i componenti in elm
attribute
elm-css. typed css. pro: typed. cons: mischio css e codice
elm-ui
elm-material-component. embedda web components

una debolezza è che così usiamo implementazioni js schifose

scrivere articolo medium o su dev.to

presentare il link e il decifrato con una rotaizone 3d https://mdgriffith.github.io/elm-style-animation/3.0.0/Showcase.html o colore

business model per pagare il server: pubblicità

altra idea. posso condivire ad un email google. poi quello si logga con oauth e può vedere il segreto. problema: è legato a google o cmq a un servizio oauth. problema 2 devo storare il testo in chiaro (posso usare IBE)

https://security.stackexchange.com/questions/184706/can-we-trust-onetimesecret
https://tozny.com/blog/e2e-crypto-secrets/
Questo ha una bella grafica: https://www.saltify.io/
Add to slack
Send with whatsapp, telegram

anti-MitB

## API v1
GET    /v1/status                               Onetime::App::API#status

POST   /v1/share                                Onetime::App::API#share
POST   /v1/create                               Onetime::App::API#share
POST   /v1/generate                             Onetime::App::API#generate

POST   /v1/secret/:key                          Onetime::App::API#show_secret

GET    /v1/private/recent                       Onetime::App::API#show_metadata_recent
GET    /v1/metadata/recent                      Onetime::App::API#show_metadata_recent

GET    /v1/private/:key                         Onetime::App::API#show_metadata
POST   /v1/private/:key                         Onetime::App::API#show_metadata
GET    /v1/metadata/:key                        Onetime::App::API#show_metadata
POST   /v1/metadata/:key                        Onetime::App::API#show_metadata

POST   /v1/private/:key/burn                    Onetime::App::API#burn_secret

integrazione a https://www.stathat.com/ però potrebbe essere in clash con le analitics di ihp
internazionalizzare

OT: demo elm della votazione online
OT: socrates: intelligenza artificiale per educare gli analfabeti funzionali attraverso il dialogo 
OT: un tool di whois che cerca direttamente su ICANN anti domain front running
OT: progetto organi su wikipedia

capire embeds_many di Ecto
